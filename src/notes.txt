https://www.tortall.net/projects/yasm/manual/html/nasm-immediate.html
struct Operand
{
	union char* memoryLabel;
	Register register;
	int stackOffset;
	// Maybe also add immediate so during compliation constant expressions like 2 + 2 can be evaluated
};

// Bitset
https://stackoverflow.com/questions/29165588/c-nested-unions-and-structs
// Custom printf for instructions taking in Result values
http://www.egr.unlv.edu/~ed/assembly64.pdf

Register allocation
Should some registers not be allocated because of function calls or instructions like mul https://www.felixcloutier.com/x86/mul
Which registers should be allocated first
System V ABI uses [rdi, rsi, rdx, rcx, r8, r9] for parameters
[rax, rdi, rsi, rdx, rcx, r8, r9, r10, r11] are scratch registers (caller saved)
[rbx, rsp, rbp, r12, r13, r14, r15] are preserved (calle saved)
[rax, rdx] store the return value
xmm0 - xmm7 are used for floating point

Ast function can have isLeaf that will be set during semnatic analysis
Leaf functions don't need to allocate on the stack because they have the top of the stack for themselves.

Stack has to be aligned to 128 bits on function call for simd instructions.

Semantic analysis is mostly used for type cheking and could also be used for variable binding.
This compiler doesn't need a semantic analizer because c requires a declaration to appear before
use of a type. In higher level languages like javascript name binding could be done at runtime without analysing the generated ast beforehand.

An optimizing compiler might benefit from time checking because it knows the resulting type of an expression
and can optimize it better for example using the floating point registers for things like (a < b) + 2.0

It is probably better to scan the whole file before starting parsing.
This simplifies parsing of things like literal suffixes.

There are no simd operations for the extended precision floating point so you have to use the x87 fpu.
Microsoft compilers just use the double precision floating point for both double and long double.

Microsoft also uses 4 bytes for both int and long, but long long has 8 bytes.
On Unix long and long long have 8 bytes and int has bytes.

https://www.ibm.com/docs/en/ibm-mq/9.0?topic=platforms-standard-data-types-unix-linux-windows

movd and movq are used for moving intergers to sse registers. The values are zero extended.
https://www.gamedev.net/blog/615/entry-2250281-demystifying-sse-move-instructions/